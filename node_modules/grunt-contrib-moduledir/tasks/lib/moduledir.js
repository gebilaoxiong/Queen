/**
 *
 * @authors 熊洋 (xywindows@gmail.com)
 * @date    2014-03-29 14:27:48
 * @description
 */

exports.init = function(grunt) {
	var core_toString = Object.prototype.toString,

		exports = {};

	/*生成命名空间*/
	exports.ns = function(root, namespace) {
		var nsArray = namespace.split('.'),
			i = 0,
			name;

		while (name = nsArray[i++]) {
			if (!root[name] || core_toString.call(root[name]) !== '[object Object]') {
				root[name] = {};
			}
			root = root[name];

		}

		return root;
	}

	exports.requirePathBuilder = function(paths) {
		var regSource = "",
			reg,
			shortPath,
			pathMapping = {};

		for (shortPath in paths) {
			pathMapping[paths[shortPath]] = shortPath;
			regSource += '(?:' + paths[shortPath] + ')|';
		}


		if (regSource) {
			regSource = '^' + regSource;
			reg = new RegExp(regSource);
		}

		console.log(pathMapping)

		return function(fielpath) {
			var lastMatch;

			reg.lastIndex = 0;
			if (reg && reg.test(fielpath)) {
				lastMatch = RegExp.lastMatch;
				if (pathMapping[lastMatch]) {
					fielpath = pathMapping[lastMatch] + fielpath.substring(lastMatch.length);
				}
			}

			return '\'' + fielpath + '\'';;
		}
	}

	function escapeRegExp(text) {
		return text.replace(/([-.*+?\^${}()|\[\]\/\\])/g, '\\$1');
	}

	return exports;
}